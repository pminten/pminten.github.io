<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir Patterns | A Cauldron of Black and White Stones]]></title>
  <link href="http://pminten.github.io/blog/categories/elixir-patterns/atom.xml" rel="self"/>
  <link href="http://pminten.github.io/"/>
  <updated>2013-10-01T11:26:56+02:00</updated>
  <id>http://pminten.github.io/</id>
  <author>
    <name><![CDATA[Peter Minten]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir Patterns: Abstract Data Structures]]></title>
    <link href="http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/"/>
    <updated>2013-09-12T10:45:00+02:00</updated>
    <id>http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures</id>
    <content type="html"><![CDATA[<p>Wouldn&rsquo;t you like to define a data structure as a module, with the internals
hidden? Obviously you can, but because modules are not records the data
structure then can&rsquo;t be used with protocols. You could define a record and in
the <code>do</code> block put functions to manipulate it but then you&rsquo;re making it easy for
your users to use the record directly, and trample on the invariants in the
process.</p>

<h2>Record tags</h2>

<p>Luckily there is a trick. It&rsquo;s not very obvious but if you read the
documentation for <code>Kernel.defrecordp/3</code> closely there is a tag field which is
used in an example to set the tag to the name of the enclosing module. What&rsquo;s
the tag? Well in Erlang, and Elixir, records are stored as tuples with the first
field being a &ldquo;tag&rdquo; that distinguishes different records and the other fields
being the data of the record. With <code>defrecord</code> the tag is always the name of the
record module, with <code>defrecordp</code> it is the record name.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">defrecordp</span> <span class="ss">:foo</span><span class="p">,</span> <span class="ss">a:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">b:</span> <span class="no">nil</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="ss">:foo</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="ss">:foo</span><span class="p">,</span> <span class="n">foo</span><span class="p">(</span><span class="ss">a:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">b:</span> <span class="m">2</span><span class="p">)</span> <span class="o">==&gt;</span> <span class="p">{</span> <span class="ss">:foo</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">defrecordp</span> <span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">,</span> <span class="ss">a:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">b:</span> <span class="no">nil</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="ss">:foo</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="ss">:bar</span><span class="p">,</span> <span class="n">foo</span><span class="p">(</span><span class="ss">a:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">b:</span> <span class="m">2</span><span class="p">)</span> <span class="o">==&gt;</span> <span class="p">{</span> <span class="ss">:bar</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When defining implementations of protocols the name you pass to <code>for:</code> is the
tag of the record. This makes perfect sense as the protocol doesn&rsquo;t need to know
anything about your record except how to recognize it, and that&rsquo;s what the tag
is for.</p>

<!-- more -->


<h2>An abstract binary tree</h2>

<p>Using record tags you can write an abstract binary tree module like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>An abstract binary tree </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">BinTree</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="c1"># Invariant: left.value &amp;lt;= value &amp;lt;= right.value</span>
</span><span class='line'>  <span class="n">defrecordp</span> <span class="ss">:tree</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">MODULE</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="ss">value:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">left:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">right:</span> <span class="no">nil</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">new</span><span class="p">()</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tree</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">from_enum</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Enum</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">|</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">do_from_enum</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">defp</span> <span class="n">do_from_enum</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">count</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">count</span> <span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="m">0</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">middle</span> <span class="o">=</span> <span class="n">div</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">left</span><span class="p">,</span> <span class="n">rest</span> <span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">middle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">[</span><span class="n">value</span><span class="p">],</span> <span class="n">right</span> <span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">rest</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">(</span><span class="ss">value:</span> <span class="n">value</span><span class="p">,</span> <span class="ss">left:</span> <span class="n">do_from_enum</span><span class="p">(</span><span class="n">left</span><span class="p">),</span> <span class="ss">right:</span> <span class="n">do_from_enum</span><span class="p">(</span><span class="n">right</span><span class="p">))</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="no">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">nil</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">acc</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">value</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">tree</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">[</span><span class="ss">:value</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span><span class="p">])</span>
</span><span class='line'><span class="n">acc1</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="n">acc2</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">acc1</span><span class="p">)</span>
</span><span class='line'><span class="n">reduce</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">acc2</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">defimpl</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">BinTree</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">f</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">BinTree</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">BinTree</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="k">fn</span> <span class="n">_</span><span class="p">,</span> <span class="n">n</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">n</span> <span class="o">+</span> <span class="m">1</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">BinTree</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="k">fn</span> <span class="n">y</span><span class="p">,</span> <span class="n">found</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">found</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>__MODULE__</code> is a special variable that expands to the name of the module. I
could have written <code>BinTree</code> in it&rsquo;s place, but <code>__MODULE__</code> stands out and is a
good reminder of what trick is used here.</p>

<p>The module works as you&rsquo;d expect:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">BinTree</span><span class="o">.</span><span class="n">from_enum</span><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="no">BinTree</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="p">{</span><span class="no">BinTree</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="p">{</span><span class="no">BinTree</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="no">nil</span><span class="p">,</span> <span class="no">nil</span><span class="p">},</span> <span class="no">nil</span><span class="p">},</span> <span class="p">{</span><span class="no">BinTree</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="no">nil</span><span class="p">,</span> <span class="no">nil</span><span class="p">}}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">BinTree</span><span class="o">.</span><span class="n">from_enum</span><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">4</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="m">4</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We&rsquo;re still showing the guts of the record through <code>inspect</code> though, but that&rsquo;s
easily changed.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defimpl</span> <span class="no">Inspect</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">BinTree</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">inspect</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#&lt;BinTree #{inspect(Enum.to_list(t))}&gt;&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">BinTree</span><span class="o">.</span><span class="n">from_enum</span><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">4</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="c1">#&lt;BinTree [1, 2, 3, 4]&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just remember that we&rsquo;re only hiding the representation when pretty printed, if
you pass <code>raw: true</code> to inspect you&rsquo;ll still see the internal representation.
Due to how Erlang (and thus Elixir) works this is unavoidable, but the pretty
printing serves as a powerful reminder to the user that the internal
representation should not be relied upon.</p>

<h2>Dispatching on the record tag</h2>

<p>There is another trick I&rsquo;d like to show you. If you look at the source of the
<code>Set</code> module from the standard library most functions look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>A Set function <a href="https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L77-L79">https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L77-L79</a> </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">difference</span><span class="p">(</span><span class="n">set1</span><span class="p">,</span> <span class="n">set2</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">target</span><span class="p">(</span><span class="n">set1</span><span class="p">)</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">set1</span><span class="p">,</span> <span class="n">set2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Huh? Object-oriented programming. Nope, just plain old <code>apply/3</code> (if the first
argument is not a literal symbol Elixir translates this to runtime apply call).
The magic is in the <code>target</code> macro:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>target macro <a href="https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L39-L47">https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L39-L47</a> </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmacrop</span> <span class="n">target</span><span class="p">(</span><span class="n">set</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">quote</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">is_tuple</span><span class="p">(</span><span class="kn">unquote</span><span class="p">(</span><span class="n">set</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">elem</span><span class="p">(</span><span class="kn">unquote</span><span class="p">(</span><span class="n">set</span><span class="p">),</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">unsupported_set</span><span class="p">(</span><span class="kn">unquote</span><span class="p">(</span><span class="n">set</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Remember that the first field of a record is the tag, so <code>elem(rec, 0)</code> extracts
the record tag. If you call <code>Set.difference(s1, s2)</code> (where <code>s1</code> and <code>s2</code> are
HashSets) <code>target(s1).difference(s1, s2)</code> gets called, which expands to
(ignoring the tuple check) <code>elem(s1, 0).difference(s1, s2)</code>, which effectively
translates to <code>apply(HashSet, :difference, [s1, s2])</code>.</p>

<p>When I first saw that code I spent some time scratching my head over why they
didn&rsquo;t use a protocol. I&rsquo;m still not 100% sure, but I strongly suspect
performance is one of the main reasons. As a test I made a very simple benchmark
to compare the overhead of calling through a protocol vs calling through
<code>apply</code>.</p>

<p><div><script src='https://gist.github.com/2b125e2165713ec49c86.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Running this a number of times gives a pretty consistent result after the first
few runs: the protocol calls are about 14-15 times slower than the dispatch
calls (which is how I named the &ldquo;through apply&rdquo; calls, not sure if it&rsquo;s the
right term).</p>

<p>Now protocol calls are known to be slow (that&rsquo;s a big part of why Elixir has
reduce based collections, those only require a few protocol calls even for
large amounts of data). There are
<a href="https://github.com/elixir-lang/elixir/issues/950">ideas</a> on how to fix that and
once those get implemented things may change for released code. For now however
indirect calls through <code>apply</code> are significantly faster.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Set&rsquo;s callbacks <a href="https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L20-L37">https://github.com/elixir-lang/elixir/blob/87be134a5b91773643ea292b521c9a8ec8167894/lib/elixir/lib/set.ex#L20-L37</a> </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="no">Behaviour</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nv">@type</span> <span class="n">value</span> <span class="p">::</span> <span class="n">any</span>
</span><span class='line'><span class="nv">@type</span> <span class="n">values</span> <span class="p">::</span> <span class="p">[</span> <span class="n">value</span> <span class="p">]</span>
</span><span class='line'><span class="nv">@type</span> <span class="n">t</span> <span class="p">::</span> <span class="n">tuple</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">defcallback</span> <span class="n">delete</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">difference</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">disjoint?</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">boolean</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">empty</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">equal?</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">boolean</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">intersection</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">member?</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">::</span> <span class="n">boolean</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">put</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">size</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">non_neg_integer</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">subset?</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">boolean</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">to_list</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">list</span><span class="p">()</span>
</span><span class='line'><span class="n">defcallback</span> <span class="n">union</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">::</span> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you look at <code>Set</code> again notice that it&rsquo;s a behaviour with callbacks of the
same types and arity for each exposed function. All the implementation modules
(just <code>HashSet</code> in the standard library) implement the <code>Set</code> behaviour and the
compiler makes sure that all the functions are indeed implemented. If you&rsquo;re
going to do the same protocol replacing trick as <code>Set</code> it&rsquo;s a good idea to
define a behaviour as well.</p>

<h2>Caveats</h2>

<p>So what are the downsides of the abstract data structure technique? Well you
lose the nice record syntax and decomposition and have to work with the macros
<code>defrecordp</code> generates for you. And it&rsquo;s a bit more work getting everything set
up.</p>

<p>But let&rsquo;s face it, those are minor issues. What you get is the ability to
offer a data structure without exposing it&rsquo;s representation. You get the ability
to make a data structure that (ugly hacks aside) can only be manipulated through
the API you provide, an API that maintains the internal invariants.</p>

<p>If you define a public record stop and think for a moment why you are defining
the record that way, because often hiding it in a module results in cleaner,
more maintainable code.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir Patterns: Mixins]]></title>
    <link href="http://pminten.github.io/blog/2013/09/11/elixir-patterns-mixins/"/>
    <updated>2013-09-11T13:48:00+02:00</updated>
    <id>http://pminten.github.io/blog/2013/09/11/elixir-patterns-mixins</id>
    <content type="html"><![CDATA[<p>Elixir&rsquo;s macros are a powerful way to add language features without encoding
them in the language core itself. One of such features is a pattern one could
call &ldquo;mixin&rdquo; (by analogy to the
<a href="https://en.wikipedia.org/wiki/Mixin">Mixin concept</a> in class based
object-oriented languages.</p>

<p>In Ruby mixin modules are used for example to define the <code>==</code>, <code>&lt;</code>, <code>&gt;=</code>, etc
operators for a class if the <code>&lt;=&gt;</code> (compare) operator is defined. The compare
operator returns -1 if the first argument is smaller than the second, 0
if it is equal to the second and 1 if it is greater than the second. Obviously
if you have that it&rsquo;s easy to define <code>&lt;</code> and friends. By including the
<code>Comparable</code> mixin you get most of the comparison operators for free, just
remember to define <code>&lt;=&gt;</code>.</p>

<h2>Default functions for protocols</h2>

<p>In Elixir we don&rsquo;t have classes but we do have similar situations where you
generally want to define something in terms of something else. Take for example
<code>Enumerable</code>. The <code>Enumerable</code> protocol has three methods: <code>reduce/3</code>, <code>count/1</code>
and <code>member?/2</code>. However you can always define <code>count</code> and <code>member?</code> in
terms of <code>reduce</code>, they&rsquo;re just there so that you can override them with a more
efficient implementation.</p>

<p>Because protocols don&rsquo;t support default definitions for a method you always have
to define all three, even if you don&rsquo;t do anything special for <code>count</code> and
<code>member?</code>. That is to say for a simple binary tree you have to write:</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defrecord</span> <span class="no">BinTree</span><span class="p">,</span> <span class="ss">value:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">left:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">right:</span> <span class="no">nil</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">defimpl</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">BinTree</span> <span class="k">do</span>
<span class="k">  def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">nil</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[</span><span class="ss">value:</span> <span class="n">value</span><span class="p">,</span> <span class="ss">left:</span> <span class="n">left</span><span class="p">,</span> <span class="ss">right:</span> <span class="n">right</span><span class="p">],</span> <span class="n">acc</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">acc1</span> <span class="o">=</span> <span class="n">fun</span><span class="o">.</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span>
<span class="n">acc2</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">acc1</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="n">reduce</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">acc2</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">count</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[]</span> <span class="o">=</span> <span class="n">t</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="o">+</span> <span class="m">1</span> <span class="k">end</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[]</span> <span class="o">=</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">reduce</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="n">v</span> <span class="k">end</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<p>Using a mixin we can simplify this. A mixin in Elixir is generally defined as a
module with a <code>__using__</code> macro.</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defmodule</span> <span class="no">Enumerable</span><span class="o">.</span><span class="no">Mixin</span> <span class="k">do</span>
<span class="k">  defmacro</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">using</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">quote</span> <span class="ss">location:</span> <span class="n">keep</span> <span class="k">do</span>
<span class="k">  def</span> <span class="n">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="n">reduce</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="o">+</span> <span class="m">1</span> <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="n">reduce</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="n">v</span> <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<!-- more -->


<p>By simply writing <code>use Enumerable.Mixin</code> we now get <code>count</code> and <code>member?</code>
defined in our module. The argument to <code>__using__</code> we&rsquo;re ignoring is a list of
keywords that you can use with <code>use</code>, for example <code>use ExUnit.TestCase, async:
true</code>.</p>

<p>With the mixin our code becomes simpler:</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defimpl</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">BinTree</span><span class="o">.</span><span class="no">Tree</span> <span class="k">do</span>
<span class="k">  </span><span class="kn">use</span> <span class="no">Enumerable</span><span class="o">.</span><span class="no">Mixin</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">nil</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[</span><span class="ss">value:</span> <span class="n">value</span><span class="p">,</span> <span class="ss">left:</span> <span class="n">left</span><span class="p">,</span> <span class="ss">right:</span> <span class="n">right</span><span class="p">],</span> <span class="n">acc</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">acc1</span> <span class="o">=</span> <span class="n">fun</span><span class="o">.</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span>
<span class="n">acc2</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">acc1</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="n">reduce</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">acc2</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<p>Certainly an improvement. But what if we want to define one of the methods we
generated. For example if our binary tree has the invariant &ldquo;left.value &lt; value
&lt; right.value&rdquo; we can use that for faster member testing.</p>

<p>To support this we&rsquo;ll mark the mixed in functions as overridable. That means
that if the compiler comes across a new definition for the function (i.e.
function clauses that aren&rsquo;t right next to previous clauses of the function) it
will not complain but forget about the old definition of the function and use
the new one.</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defmodule</span> <span class="no">Enumerable</span><span class="o">.</span><span class="no">Mixin</span> <span class="k">do</span>
<span class="k">  defmacro</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">using</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">quote</span> <span class="ss">location:</span> <span class="n">keep</span> <span class="k">do</span>
<span class="k">  def</span> <span class="n">count</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="n">reduce</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="o">+</span> <span class="m">1</span> <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="n">reduce</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="k">fn</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">acc</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="n">v</span> <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">defoverridable</span> <span class="p">[</span><span class="ss">count:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">member?:</span> <span class="m">2</span><span class="p">]</span>
<span class="k">end</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<p>The arguments to <code>defoverridable</code> are the function names and arities of the
functions you want to be overridable. Now that <code>member?</code> is overridable we can
define a new custom <code>member?</code>:</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defimpl</span> <span class="no">Enumerable</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">BinTree</span><span class="o">.</span><span class="no">Tree</span> <span class="k">do</span>
<span class="k">  </span><span class="kn">use</span> <span class="no">Enumerable</span><span class="o">.</span><span class="no">Mixin</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">nil</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
  <span class="k">def</span> <span class="n">reduce</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[</span><span class="ss">value:</span> <span class="n">value</span><span class="p">,</span> <span class="ss">left:</span> <span class="n">left</span><span class="p">,</span> <span class="ss">right:</span> <span class="n">right</span><span class="p">],</span> <span class="n">acc</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">acc1</span> <span class="o">=</span> <span class="n">fun</span><span class="o">.</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span>
<span class="n">acc2</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">acc1</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="n">reduce</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">acc2</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="no">nil</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">false</span>
  <span class="k">def</span> <span class="n">member?</span><span class="p">(</span><span class="no">BinTree</span><span class="p">[</span><span class="ss">value:</span> <span class="n">value</span><span class="p">,</span> <span class="ss">left:</span> <span class="n">left</span><span class="p">,</span> <span class="ss">right:</span> <span class="n">right</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">cond</span> <span class="k">do</span>
<span class="k">  </span><span class="n">x</span> <span class="o">==</span> <span class="n">value</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">true</span>
  <span class="n">x</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">value</span>  <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">member?</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
  <span class="n">x</span> <span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">value</span>  <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">member?</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="k">end</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<p>Now our <code>member?</code> is much faster, assuming a balanced tree of 1024 nodes it only
takes 10 steps instead of 1024 steps.</p>

<h2>Behaviours</h2>

<p>Another place where mixins come in handy is in OTP style behaviours. Take a look
at a (slightly edited) bit of GenServer.Behaviour:</p>

<p><div class="highlight"><pre><code class="elixir"><span class="k">defmodule</span> <span class="no">GenServer</span><span class="o">.</span><span class="no">Behaviour</span>
  <span class="k">defmacro</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">using</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">quote</span> <span class="ss">location:</span> <span class="ss">:keep</span> <span class="k">do</span>
<span class="k">  </span><span class="nv">@behavior</span> <span class="ss">:gen_server</span>

  <span class="k">def</span> <span class="n">init</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="p">{</span> <span class="ss">:ok</span><span class="p">,</span> <span class="n">args</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">handle_call</span><span class="p">(</span><span class="n">_request</span><span class="p">,</span> <span class="n">_from</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="k">do</span>
<span class="k">    </span><span class="p">{</span> <span class="ss">:noreply</span><span class="p">,</span> <span class="n">state</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="c1"># functions ommitted</span>

  <span class="n">defoverridable</span> <span class="p">[</span><span class="ss">init:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">handle_call:</span> <span class="m">3</span><span class="p">,</span> <span class="ss">handle_info:</span> <span class="m">2</span><span class="p">,</span>
    <span class="ss">handle_cast:</span> <span class="m">2</span><span class="p">,</span> <span class="ss">terminate:</span> <span class="m">2</span><span class="p">,</span> <span class="ss">code_change:</span> <span class="m">3</span><span class="p">]</span>
<span class="k">end</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></p>

<p>This declares the module that uses <code>GenServer.Behaviour</code> to be a gen_server
callback module (<code>@behavior :gen_server</code>) and declares all the callbacks with
simple no-op implementations, which are overridable. The idea is that you define
just the callbacks you need without being forced to declare all of them just to
keep the compiler happy.</p>

<h2>Caveats</h2>

<p>Mixins are a great tool. But like all tools they have their specific strengths
and weaknesses. Ever tried to put a nail in a wall with a screw driver?</p>

<p>Mixins are macro&rsquo;s and as such they tend to obscure the true meaning of the
code. If you refer to a function that was introduced by a mixin people might
wonder where that function came from. Luckily <code>use</code> is fairly easy to spot so
this isn&rsquo;t such a big problem.</p>

<p>Mixins also bloat the code by placing copies of definitions in multiple files.
It&rsquo;s best to keep mixed in definitions simple, if you need something more
complicated consider factoring out the part of a function that doesn&rsquo;t need to
be in the target module into a separate function in some common module and call
that.</p>

<p>Finally badly documented mixins make understanding what goes on in the target
module much harder than it needs to be. If you write a mixin make sure you
include documentation on what functions it adds and what they do.</p>

<p>These small quibbles aside mixins are a great tool for reducing the amount of
boilerplate in modules.</p>
]]></content>
  </entry>
  
</feed>
